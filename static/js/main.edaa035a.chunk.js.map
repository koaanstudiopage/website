{"version":3,"sources":["assets/wide.png","assets/TALL.png","logo.svg","pages/HomePage/Home.js","pages/AboutPage/About.js","pages/ContactPage/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","About","src","WideImg","TallImg","Contact","App","Fragment","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,8ECA3CD,EAAOC,QAAU,IAA0B,kC,oPCO9BC,EAAO,WAClB,OACE,yBAAKC,UAAU,YACb,sCCUSC,G,MAdM,WACnB,OACE,yBAAKD,UAAU,aACb,yBAAKA,UAAU,WAEf,yBAAKA,UAAU,eACb,yBAAKE,IAAKC,IAASH,UAAU,YAC7B,yBAAKE,IAAKE,IAASJ,UAAU,aAC7B,yCCZKK,EAAU,WACrB,OACE,6BACE,8CC0BSC,MAjBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAA+B,IAAKC,UAAWV,IACtD,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CACEO,KAA+B,WAC/BC,UAAWJ,QCXHK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.edaa035a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wide.d1fe74e3.png\";","module.exports = __webpack_public_path__ + \"static/media/TALL.350872b6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n//import Navigationbar from \"../../Components/Navbar.js\";\r\nimport \"./Homestyle.css\";\r\nimport WideImg from \"../../assets/wide.png\";\r\nimport TallImg from \"../../assets/TALL.png\";\r\nimport Contactblock from \"./Home-2\";\r\nimport Block2 from \"./HomeBolck3\";\r\nexport const Home = () => {\r\n  return (\r\n    <div className=\"HomePage\">\r\n      <h1>home</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport WideImg from \"../../assets/wide.png\";\r\nimport TallImg from \"../../assets/TALL.png\";\r\n//import Navbar from \"../../Components/Navbar.js\";\r\nimport \"./AboutPage.css\";\r\n\r\nexport const About = () => {\r\n  return (\r\n    <div className=\"aboutPage\">\r\n      <div className=\"Navbox\"></div>\r\n\r\n      <div className=\".hero-image\">\r\n        <img src={WideImg} className=\"mainImg\" />\r\n        <img src={TallImg} className=\"phoneImg\" />\r\n        <h1>about</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nexport const Contact = () => {\r\n  return (\r\n    <div>\r\n      <h1>Contact Page</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  ROute,\n  Switch,\n  HashRouter,\n  Route,\n} from \"react-router-dom\";\nimport { Home } from \"./pages/HomePage/Home.js\";\nimport About from \"./pages/AboutPage/About.js\";\nimport { Contact } from \"./pages/ContactPage/Contact.js\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route path={process.env.PUBLIC_URL + \"/\"} component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route\n            path={process.env.PUBLIC_URL + \"/contact\"}\n            component={Contact}\n          />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// styles\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/css/paper-kit.css\";\n// import \"assets/css/paper-kit.min.css\";\n// import \"assets/css/paper-kit.css.map\";\nimport \"./assets/demo/demo.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}